# SpringappApplication.java
package com.example.springapp;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class SpringappApplication {
    public static void main(String[] args) {
        SpringApplication.run(SpringappApplication.class, args);
    }
}

# Expense.java  
package com.example.springapp.model;
import jakarta.persistence.*;
import java.time.LocalDate;
@Entity
@Table(name = "expenses")
public class Expense {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private Long employeeId;
    private Double amount;
    private String description;
    private LocalDate date;
    private String status = "PENDING";
    private String remarks;
    public Expense() {}
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public Long getEmployeeId() { return employeeId; }
    public void setEmployeeId(Long employeeId) { this.employeeId = employeeId; }
    public Double getAmount() { return amount; }
    public void setAmount(Double amount) { this.amount = amount; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    public LocalDate getDate() { return date; }
    public void setDate(LocalDate date) { this.date = date; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
    public String getRemarks() { return remarks; }
    public void setRemarks(String remarks) { this.remarks = remarks; }
}

# ExpenseRepository.java
package com.example.springapp.repository;
import com.example.springapp.model.Expense;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
@Repository
public interface ExpenseRepository extends JpaRepository<Expense, Long> {
}

# ExpenseController.java
package com.example.springapp.controller;
import com.example.springapp.model.Expense;
import com.example.springapp.repository.ExpenseRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "http://localhost:3000")
public class ExpenseController {
    @Autowired
    private ExpenseRepository expenseRepository;
    @PostMapping("/expenses")
    public ResponseEntity<?> createExpense(@RequestBody Expense expense) {
        if (expense.getAmount() == null || expense.getAmount() <= 0) {
            return ResponseEntity.badRequest().body("Amount must be greater than 0");
        }
        if (expense.getDescription() == null || expense.getDescription().length() < 5 || expense.getDescription().length() > 200) {
            return ResponseEntity.badRequest().body("Description must be between 5-200 characters");
        }
        if (expense.getDate() == null || expense.getDate().isAfter(LocalDate.now())) {
            return ResponseEntity.badRequest().body("Date cannot be in the future");
        }
        if (expense.getEmployeeId() == null) {
            return ResponseEntity.badRequest().body("Employee ID is required");
        }
        return ResponseEntity.ok(expenseRepository.save(expense));
    }
    @GetMapping("/expenses")
    public List<Expense> getAllExpenses() {
        return expenseRepository.findAll();
    }
    @PutMapping("/expenses/{id}/status")
    public ResponseEntity<?> updateExpenseStatus(@PathVariable Long id, @RequestBody Map<String, String> request) {
        Optional<Expense> expenseOpt = expenseRepository.findById(id);
        if (!expenseOpt.isPresent()) {
            return ResponseEntity.notFound().build();
        }
        Expense expense = expenseOpt.get();
        String status = request.get("status");
        String remarks = request.get("remarks");
        if ("REJECTED".equals(status) && (remarks == null || remarks.trim().isEmpty())) {
            return ResponseEntity.badRequest().body("Remarks required for rejection");
        }
        expense.setStatus(status);
        expense.setRemarks(remarks);
        return ResponseEntity.ok(expenseRepository.save(expense));
    }
}